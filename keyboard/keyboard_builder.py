"""–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.database import Question, Test, User


def create_main_menu_keyboard(is_admin: bool) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    # TODO: –î–æ–±–∞–≤–ª—è—Ç—å –º–µ–Ω—é –ø–æ –º–µ—Ä–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.row(
        InlineKeyboardButton(text="–¢–µ—Å—Ç—ã", callback_data="tests")
    )
    if is_admin:
        keyboard_builder.row(
            InlineKeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="users")
        )
    return keyboard_builder.as_markup()


def create_tests_keyboard(
    tests: list[Test], is_admin: bool
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    keyboard_builder = InlineKeyboardBuilder()
    for button in tests:
        keyboard_builder.row(
            InlineKeyboardButton(
                text=(
                    f"{'üîí' if button.is_publish else '‚úèÔ∏è'}" f" {button.title}"
                    if is_admin
                    else f"{button.title}"
                ),
                callback_data=f"test_{button.id}",
            )
        )
    if is_admin:
        keyboard_builder.row(
            InlineKeyboardButton(
                text="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç", callback_data="add_test"
            )
        )
    keyboard_builder.row(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return keyboard_builder.as_markup()


def create_test_keyboard(
    test: Test,
    questions: list[Question],
    is_publish: bool,
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–Ω—é —Ç–µ—Å—Ç–∞."""
    keyboard_builder = InlineKeyboardBuilder()
    if not is_publish:
        for button in questions:
            keyboard_builder.row(
                InlineKeyboardButton(
                    text=(f"{'üñº' if button.image else ''}" f" {button.text}"),
                    callback_data=f"question_{button.id}",
                )
            )
        keyboard_builder.row(
            InlineKeyboardButton(
                text="–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
                callback_data=f"add_question_test_{test.id}",
            )
        )
        keyboard_builder.row(
            InlineKeyboardButton(
                text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–µ—Å—Ç",
                callback_data=f"publish_test_{test.id}",
            )
        )
    keyboard_builder.row(
        InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç", callback_data=f"confirm_delete_test_{test.id}"
        )
    )
    keyboard_builder.row(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="tests")
    )
    return keyboard_builder.as_markup()


def create_answers_keyboard(
    answers: list[str],
    for_test: bool = False,
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."""
    keyboard_builder = InlineKeyboardBuilder()
    for button in answers:
        keyboard_builder.row(
            InlineKeyboardButton(text=f"{button}", callback_data=f"{button}")
        )
    return keyboard_builder.as_markup()


def create_confirm_keyboard(
    callback_yes: str = "yes",
    callback_no: str = "no",
    text_yes: str = "–î–∞",
    text_no: str = "–ù–µ—Ç",
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è."""
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.row(
        InlineKeyboardButton(text=text_yes, callback_data=callback_yes),
        InlineKeyboardButton(text=text_no, callback_data=callback_no),
    )
    return keyboard_builder.as_markup()


def create_after_test_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞."""
    keyboard_builder = InlineKeyboardBuilder()
    keyboard_builder.row(
        InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
    )
    return keyboard_builder.as_markup()


def create_users_keyboard(users: list[User]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    keyboard_builder = InlineKeyboardBuilder()
    for button in users:
        keyboard_builder.row(
            InlineKeyboardButton(
                text=f"{button.name} {button.surname}",
                callback_data=f"user_{button.id}",
            )
        )
    keyboard_builder.row(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return keyboard_builder.as_markup()


def create_user_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    keyboard_builder = InlineKeyboardBuilder()  # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
    keyboard_builder.row(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="users")
    )
    return keyboard_builder.as_markup()
